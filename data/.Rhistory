sapply(data_siswa, hitungNilaiAkhir)
lapply(data_siswa, hitungNilaiAkhir)
lapply(data_siswa, hitungNilaiAkhir)
plusTwo = function(x){
x = x + 2
}
lapply(iris[,1], plusTwo)
lapply(iris[1:5,1], plusTwo)
iris[1:5,1]
sapply(iris[1:5,1], plusTwo)
help("set.seed")
runif(1); .Random.seed[1:6]; runif(1); .Random.seed[1:6]
x <- rnorm(100)
plot(x)
x <- dnorm(100)
plot(x)
rnorm(10)
rnorm(5)
help("dnorm")
x = rnorm(20)
y = dnorm(x)
plot(x,y)
y = dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
x = seq(-10, 10, by = .1)
y = dnorm(x, mean = 2.5, sd = 0.5)
plot(x,y)
help("dbinom")
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(2)
rnorm(5)
help("set.seed")
rnorm(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(10)
rnorm(5)
set.seed(10)
rnorm(5)
rnorm(1000)
rnorm(10000)
rnorm(100000)
rnorm(1000000)
rnorm(10000000)
mean(rnorm(10000000))
mean(rnorm(100000000))
rm(list = ls())
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(500000000))
assign(paste0("mean", seed), x)
}
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(500000000))
assign(paste0("mean", seed), x)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(100000000))
assign(paste0("mean", seed), x)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(1000000))
assign(paste0("mean", seed), x)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
mean1
meanOfRandomNumber(1)
mean1
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(1000000))
assign(paste0("mean", seed), x)
envir = .GlobalEnv
}
meanOfRandomNumber(1)
mean1
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(1000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
meanOfRandomNumber(1)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(10000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(50000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(50000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
system.time(
{
sapply(rnorm(50000000), mean)
}
)
system.time(
{
data_random = list(rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000))
sapply(data_random, mean)
}
)
system.time(
{
data_random = list(rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000))
print(sapply(data_random, mean))
}
)
system.time(
{
data_random = list(rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000), rnorm(50000000))
print(sapply(data_random, mean))
}
)
system.time(
{
data_random = list(rnorm(5000000), rnorm(5000000), rnorm(5000000), rnorm(5000000), rnorm(5000000))
print(sapply(data_random, mean))
}
)
system.time(
{
data_random = list(rnorm(10000000), rnorm(10000000), rnorm(10000000), rnorm(10000000), rnorm(10000000))
print(sapply(data_random, mean))
}
)
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
print(sapply(data_random, mean))
}
)
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(30000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
system.time(
{
for(i in 1:5){
meanOfRandomNumber(i)
}
}
)
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
print(sapply(data_random, mean))
}
)
rm(list = ls())
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
print(sapply(data_random, mean))
}
)
system.time(
{
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
}
)
rm(list = ls())
system.time(
{
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
}
)
install.packages("parallel")
install.packages("parallel")
install.packages("foreach")
install.packages("doParallel")
library(parallel)
detectCores()
rm(list = ls())
meanOfRandomNumber = function(seed) {
set.seed(seed)
x = mean(rnorm(30000000))
assign(paste0("mean", seed), x, pos = .GlobalEnv)
}
system.time(
{
for(i in 1:4){
meanOfRandomNumber(i)
}
}
)
rm(list = ls())
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
print(sapply(data_random, mean))
}
)
system.time(
{
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
mean(rnorm(30000000))
}
)
library(parallel)
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
cores = detectCores()
parallel_env = makeCluster(cores)
parLapply(data_random, mean)
stopCluster(parallel_env)
}
)
library(parallel)
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
cores = detectCores() - 1
parallel_env = makeCluster(cores)
parLapply(data_random, mean)
stopCluster(parallel_env)
}
)
library(parallel)
system.time(
{
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
cores = detectCores() - 1
parallel_env = makeCluster(cores)
parLapply(data_random, mean)
stopCluster(parallel_env)
}
)
library(parallel)
# system.time(
#   {
data_random = list(rnorm(30000000), rnorm(30000000), rnorm(30000000), rnorm(30000000))
cores = detectCores() - 1
parallel_env = makeCluster(cores)
parLapply(data_random, mean)
stopCluster(parallel_env)
#   }
# )
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(1000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(10000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(100000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(100000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(1000000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:4) %dopar% {
print(mean(rnorm(10000000)))
}
stopImplicitCluster()
})
library(foreach)
library(doParallel)
rm(list = ls())
system.time({
cl<-makeCluster(2)
registerDoParallel(cl)
foreach(1:2) %dopar% {
print(mean(rnorm(20000000)))
}
stopImplicitCluster()
})
help("%dopar%")
library(foreach)
library(doParallel)
help("%dopar%")
help("makeCluster")
help(registerDoParallel)
help(stopCluster)
nrow(iris)
ncol(iris)
kota = "banjarmasin"
random_data = iris[sample(nrow(iris), 5),]
random_data
assign("kota", "banjarmasin")
assign("random_data", iris[sample(nrow(iris), 5),])
ls()
rm(list = ls())
assign("kota", "banjarmasin")
assign("random_data", iris[sample(nrow(iris), 5),])
ls()
exists("kota")
exists("desa")
exists("kota", "random_data")
exists(c("kota", "random_data"))
exists(c("kota", "random_data", "desa"))
exists(c("dusun", desa"))
)
""
exists(c("dusun", "desa"))
rm(kota)
exists("kota")
library(Rtsne)
help("Rtsne")
library(Rtsne)
Rtsne
data1 = iris[1:5, 1]
data2 = iris[131:135, 1]
data_all = cbind(data1, data2)
data3 = iris[1:5, 5]
data3
data_all = cbind(data_all, data3)
data_all
data[1,3]
data_all[1,3]
data_all = cbind.data.frame(data_all, data3)
data_all
data_all = cbind(data1, data2)
data_all = cbind.data.frame(data_all, data3)
data_all
data1 = iris[5:10,]
data2 = iris[130:135,]
data_all = rbind.data.frame(data1, data2)
data_all
data_all = rbind(data1, data2)
data_all
class(data_all)
iris[1:10]
iris[1:10,]
iris[33:43,]
iris[66:76,]
filename_compound = "compound _ids.txt"
filename_protein = "protein _ids.txt"
filename_matrix = "compounds_proteins_interactions.txt"
filename_compound_feature = "compound_features.csv"
filename_protein_feature = "protein_features.csv"
data_compound = read.table(filename_compound)
data_protein = read.table(filename_protein)
data_matrix = read.table(filename_matrix)
data_compound_feature = read.csv(filename_compound_feature)
data_protein_feature = read.csv(filename_protein_feature)
data_compound_feature = read.csv(filename_compound_feature, header = FALSE)
data_protein_feature = read.csv(filename_protein_feature, header = FALSE)
data_matrix
data_compound_feature
data_protein_feature
colnames(data_matrix)=data_protein
rownames(data_matrix) = data_compound
rownames(data_matrix) = unlist(data_compound)
colnames(data_matrix) = unlist(data_protein)
rownames(data_matrix) = unlist(data_compound)
data_matrix
rownames(data_protein_feature) = unlist(data_protein)
rownames(data_compound_feature) = unlist(data_compound)
data_protein_feature
data_compound_feature
bilangan1 = 5
get("bilangan1")
assign("bilangan2", 13)
get("bilangan2")
setwd("~/OneDriveBussiness/OneDrive - eSevens/HD Backup/My University/Study/Kanazawa University/Riset/Code/R/201703/data")
test = read.table("yeast_us_auc.txt")
test
test[,c(3,9)]
test1 = test[,c(3,9)]
test1
write.csv(test1, "yeast_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("abalone_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "abalone_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("vowel_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "vowel_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("pageblock_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "pageblock_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("covertype_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "covertype_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("usps_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "usps_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("fault_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "fault_us_auc.csv", quote = FALSE, row.names = FALSE)
test = read.table("breast_us_auc.txt")
test1 = test[,c(3,9)]
write.csv(test1, "breast_us_auc.csv", quote = FALSE, row.names = FALSE)
test1
